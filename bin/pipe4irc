#! /usr/bin/perl
use strict;
use warnings;


=head1 NAME

pipe4irc - pipe from command line into IRC channel or to user

=head1 SYNOPSIS

 do_stuff | pipe4irc

 pipe4irc do_stuff

=head1 DESCRIPTION

Intention: a simple script into which a process can pipe stuff,
reliably sending to IRC.

=cut


use YAML qw( LoadFile DumpFile );
use IRC::Utils qw( strip_formatting );
use POE qw( Component::IRC );


sub main {
    # quick hack of a config
    my %cfg;
    my $cfg_fn = "$ENV{HOME}/.pipe4irc.yaml";
    if (-f $cfg_fn) {
        %cfg = %{ LoadFile($cfg_fn) };
    } else {
        %cfg =
          (nick => "pipe4$ENV{USER}",
           server => 'irc.example.org:16667',
           dest => '#progress');
        DumpFile($cfg_fn, \%cfg);
        die "Wrote example config to $cfg_fn\n".
          "You will need to configure it - end";
    }

    # quick hack of arg processing
    if (@ARGV && (join ':', '', @ARGV, '') =~ m{:(-h|--help):}) {
        print "Syntax: do_stuff | pipe4irc\n
Pipe stuff over IRC to the user or channel configured in
  $cfg_fn

Attempt to provide a reliable delivery, by retrying, within limits.
Print nothing except errors from IRC server and incoming replies.\n\n";
        return 1;
    }

    my $irc = P4I::IRC->new($cfg{server}, $cfg{nick});
    my $fhio = P4I::FHIO->new($irc, stdin => \*STDIN);

    my $sess = plugnplay($irc, $fhio);
#  $sess->option(trace => 1);

  # global is exported from POE::Kernel by POE
  $poe_kernel->run();
  # returns after IRC shutdown

    return 0;
}

sub plugnplay {
    my @obj = @_;

    my @objlist = map {( $_, $_->want_events )} @obj;

    my $sess = POE::Session->create
      (object_states => \@objlist,
       heap => {});

    foreach my $obj (@obj) {
        $obj->session_created($sess, $poe_kernel);
    }

    return $sess;
}

exit main();


package # internal - don't index
  P4I::IRC;
use strict;
use warnings;

sub new {
    my ($called, $host, $nick) = @_;

    my $port = 6667;
    $port = $1 if $host =~ s/:(\d+)$//;

    my $irc = POE::Component::IRC->spawn
      (nick => $nick,
       ircname => 'pipe4irc_ircname',
       server => $host, port => $port,
      ) or die "POE::Component::IRC spawn failed: $!";

    my $self = { host => $host, port => $port,
                 nick => $nick, irc => $irc };
    bless $self, ref($called) || $called;

    return $self;
}

sub want_ev {
    return
      [qw( _start irc_socketerr irc_connected ),
       qw( irc_001 irc_321 irc_322 irc_323 ),
       qw( irc_notice irc_msg irc_raw irc_raw_out )];
}

sub session_created {
    my ($self, $sess, $kernel) = @_;
    $kernel->sig(INT => "got_sig_int");
    return ();
}


package # internal - don't index
  P4I::FHIO;
use strict;
use warnings;

sub new {
    my ($called, $irc) = @_;

    my $self = { irc => $irc };
    bless $self, ref($called) || $called;
    return $self;
}

1;
