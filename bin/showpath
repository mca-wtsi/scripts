#! /usr/bin/perl -T

use strict;
use warnings ;

use Cwd 'abs_path';
use constant DEFAULT_PATHS => qw( PATH PERL5LIB LD_LIBRARY_PATH );

=head1 NAME

showpath - display path variables in a human-friendly way

=head1 SYNOPSIS

  showpath		# shows some default paths
  showpath MANPATH	# look it up in the environment
  showpath $SOMEPATH	# show path after expansion by the shell


=head1 AUTHOR

 Copyright (c) 2009 Genome Research Ltd.
 Author: Matthew Astley <mca@sanger.ac.uk>

This file is part of "mca-wtsi/scripts".

"mca-wtsi/scripts" is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License as
published by the Free Software Foundation; either version 2 of the
License, or (at your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program. If not, see <http://www.gnu.org/licenses/>.

=cut


sub main {
    showpath(@ARGV ? @ARGV : DEFAULT_PATHS);
}

sub showpath {
    my @items = @_;

    for (my $i=0; $i < @items; $i++) {
	my $var = $items[$i];
	my ($key, $val);

	# figure out what we're looking at
	if ($var =~ /^\w+$/ && defined $ENV{$var}) {
	    # environment variable
	    $key = $var;
	    $val = $ENV{$key};
	} elsif ($var =~ /^[A-Z]+[A-Z0-9_]+$/) {
	    # looks like an absent environment variable
	    printf("%-20s not set\n\n", $var.":");
	    next;
	} else {
	    # take it literally
	    $key = "#$i";
	    $val = $var;
	}

	# display
        my %seen;
	print "$key:\n";
	foreach my $part (split /:/, $val) {
	    $part =~ s{/+$}{};

	    my @flag;
	    push @flag, 'dir' if -d $part;
	    push @flag, 'ABSENT' if !-e _;
	    push @flag, 'DUP' if $seen{$part} ++;
	    push @flag, 'REL' if $part !~ m{^/}; # XXX: UN*Xism

	    my $symlink = '';
	    if (-l $part) {
		push @flag, 'symlink';
		my $ln = readlink($part);
		$symlink = " -> $ln";
		my $real = abs_path($part);
		$symlink .= " -> $real" unless $real eq $ln;
		push @flag, "ln2DUP" if $seen{$real};
	    }

	    printf("  %-60s %s%s\n", $part, (join ",", @flag), $symlink);
	}
	print "\n";
    }
}

main();
